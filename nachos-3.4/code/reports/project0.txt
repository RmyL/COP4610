Norlan A. Castillo N.
Joshua Posada
Luigi Ranalli
William Valido

a)
As we are not on campus I believe we cannot connect directly to 
nachos.cs.fiu.edu or the graduate nachos.aul.fiu.edu via a personal 
computer. We instead connected to ocelot.aul.fiu.edu port 22.
The group members used putty/cwgwin <ssh -t <username>@ocelot.aul.fiu.edu> and filezilla to transfer and unzip
the files using the tar zxf <nachos-3.4-linux.tar.gz> command inside of 
the directory nachosdir. Some of our members were new to putty and command prompt so we gathered as a team and exchanged information. After some trial and error, along with some research we were able to test the demos in both threads and userprogram.
Noticing a few classes consisted of c++, assembly, object files and make files. Though Nachos is a simple operating system it has complex layers.

b)Experience with the tests
Thread Demo
We did not run into any errors, but gave us a closer look as to what the 
professor meant by fair, safe, and efficient programming. The thread program
took a turn from the first thread to the second increasing the time they 
ran fairly. Emulating the way an OS handles process calls.

Halt Demo
In terms of MIPS a few registers were being populated with values corresponding to the threads involved in the userprogram. Following the roadmap its clear that nachos has 3 ways to debug internally and the one used in this project was the single-step mode. Allowing the machine to print out all the values of each of its registers with the time. We looked into the machine language of halt and found out that after 'addf' it has a  set of assembly instructions decoded below.

At PC = 0x0: JAL 52
At PC = 0x4: SLL r0,r0,0
At PC = 0xd0: ADDIU r29,r29,-24
At PC = 0xd4: SW r31,20(r29)
At PC = 0xd8: SW r30,16(r29)
At PC = 0xdc: JAL 48
At PC = 0xe0: ADDU r30,r29,r0
At PC = 0xc0: JR r0,r31
At PC = 0xc4: SLL r0,r0,0
At PC = 0xe4: JAL 4
At PC = 0xe8: SLL r0,r0,0
At PC = 0x10: ADDIU r2,r0,0
At PC = 0x14: SYSCALL

At this time a systemcall is made and the machine is ifle, no processes are left on the list, 
no interrupts to do, the machine assumes the program is completed and halts.
./nachos -d -x ../test/halt
./nachos -d
./nachos -x -s ../test/halt

c)Threads starting with the main class of addrspace threadtest.cc is called. A list is created and here threads can be coupled into states such as READY,
 RUNNING, and BLOCKED. This helps determine which threads run. A thread can only be active or be used when it is at the top of the list. SimpleThread(1) and the thread created calls function SimpleThread(0). The two threads each execute the loop in the SimpleThread() function and yield control of the CPU back and forth 5 times (0,1,2,3,4).


