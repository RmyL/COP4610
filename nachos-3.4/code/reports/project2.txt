Analysis Report Group 3 (William, Josh, Norlan, Luigi)

Modified Files:
    userprog, tests

Background

    The reason for writing this report is to share our experience 
working on Project 2 - Multiprogramming System Calls.

Progress:

    Our team was able to fulfill all parts of the project dictated 
by the project description. 

Step 1 implementing fork() and its AddrSpace:

• The Fork(func) system call creates a new user-level (child) process, whose address space
    starts as an exact copy of that of the caller (the parent), but immediately the child abandons
    the program of the parent and starts executing the function supplied by the single argument.
    Fork should return the PID of the child process ( SpaceId ). Notice this definition is slightly 
    different from the one in the syscall.h file in Nachos. Also, the semantics is not the same as Unix fork(). 
    After the forked function func finishes, the control should go back to the instruction after the initial system call Fork.

Step 2 Memory Manager:

    We first implemented getPage() to allocate the first clear page and 
    then we implemented clearPage(int i) which takes the index of a pages and frees it
    using a bitmap in code/userprog/bitmap.
    
    Then to modify AddrSpace to use the memory manager.
    
Step 3 AddrSpace::Translate function:

    The AddrSpace::Translate converts a virtual address to a physical address
 
Step 4 AddrSpace::ReadFile function:

    The AddrSpace::ReadFile loads the code and data segments into the translated memory
    instead of at position 0 like the code in AddrSpace constructor already does.
    
    This is needed for Exec() and the initial startup of the machine when
    executing any test program with virtual memory.

Step 5 PCB and the process manager classes:

    The PCB class will store the necessary information about a process.
    
    The process manager does the same thing as the memory manager.
    It has getPID and clearPID methods, which return an unused process id and clear a process id respectively. 

Step 6 implementing Yield():
    
• The Yield() call is used by a process executing in user mode to temporarily relinquish the CPU
    to another process. The return value is undefined.

Step 7 implementing Exec():

• The Exec(filename) system replaces the current process state with a new process executing the program from the file. 
You can think as if the current process stops executing and the new program is loaded in its place. 
The new program uses the object code from the Nachos object file which name is supplied as an argument to the call. 
It should return -1 to the parent if not successful. If successful, the parent process is replaced with the new program running from its beginning. 
The way to execute a new process without destroying the current one is to first Fork and then Exec.

Step 8 implementing Join():

• The Join(SpaceId) call waits and returns only after a process with the specified SpaceID
    (supplied as an argument to the call) has finished. The return value of the Join call is the exit
    status of the process for which it was waiting or -1 in the case of error (for example, invalid
    SpaceId).

Step 9 implementing Exit(int status):

• The Exit(int) call takes a single argument, which is an integer status value as in Unix. The currently executing process is terminated. 
For now, you can just ignore the status value. You need to supply this value to the parent process if and when it does a Join() .

• The Kill(SpaceId) kills a process with supplied SpaceId. It returns 0 if successful and -1 if not
    (for example, SpaceId is not valid).

Step 10 testing the system calls.

    Tested out system call using ../test/testyield and ../test/testexec
    doing so I was able to test the system calls joining in before and after a yield.
    
    Also, testexec executed another program within ../test/vectorsum which just counts executed instructions and displays them on screen.